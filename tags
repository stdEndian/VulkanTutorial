CreateDebugUtilsMessengerEXT	main.cpp	/^VkResult CreateDebugUtilsMessengerEXT(VkInstance i/
DestroyDebugUtilsMessengerEXT	main.cpp	/^void DestroyDebugUtilsMessengerEXT(VkInstance inst/
GLFW_EXPOSE_NATIVE_X11	main.cpp	4
GLFW_INCLUDE_VULKAN	main.cpp	2
HEIGHT	main.cpp	18
Mmain.cpp	main.cpp	/^int main() {$/
QueueFamilyIndices	main.cpp	56
VK_USE_PLATFORM_XLIB_XRANDR_EXT	main.cpp	1
VulkanTutuorial	main.cpp	66
WIDTH	main.cpp	17
checkDeviceExtensionSupport	main.cpp	/^  bool checkDeviceExtensionSupport(VkPhysicalDevic/
checkValidationLayerSupport	main.cpp	/^  bool checkValidationLayerSupport() {$/
cleanup	main.cpp	/^  void cleanup() {$/
createInstance	main.cpp	/^  void createInstance() {$/
createLogicalDevice	main.cpp	/^  void createLogicalDevice() {$/
createSurface	main.cpp	/^  void createSurface() {$/
debugCallback	main.cpp	/^  static VKAPI_ATTR VkBool32 debugCallback(VkDebug/
debugMessenger	main.cpp	78
device	main.cpp	80
deviceExtensions	main.cpp	30
enableValidationLayers	main.cpp	24
enableValidationLayers	main.cpp	26
findQueueFamilies	main.cpp	/^  QueueFamilyIndices findQueueFamilies(VkPhysicalD/
getRequiredExtensions	main.cpp	/^  std::vector<const char*> getRequiredExtensions()/
graphicsFamily	main.cpp	57
graphicsQueue	main.cpp	81
initVulkan	main.cpp	/^  void initVulkan() {$/
initWindow	main.cpp	/^  void initWindow() {$/
instance	main.cpp	77
isComplete	main.cpp	/^  bool isComplete() {$/
isDeviceSuitable	main.cpp	/^  bool isDeviceSuitable(VkPhysicalDevice device) {/
mainLoop	main.cpp	/^  void mainLoop() {$/
physicalDevice	main.cpp	79
pickPhysicalDevice	main.cpp	/^  void pickPhysicalDevice() {$/
populateDebugMessengerCreateInfo	main.cpp	/^  void populateDebugMessengerCreateInfo(VkDebugUti/
presentFamily	main.cpp	58
presentQueue	main.cpp	82
run	main.cpp	/^  void run() {$/
setupDebugMessenger	main.cpp	/^  void setupDebugMessenger() {$/
surface	main.cpp	83
validationLayers	main.cpp	21
window	main.cpp	76
